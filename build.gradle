apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.sonarqube'
apply plugin: 'nebula.rpm'
apply plugin: 'nebula.deb'
apply plugin: "com.github.hierynomus.license"
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.jfrog.bintray'
//apply plugin: 'nebula.lint'

// rpm/deb package variables
def _vendor = 'Dell'
def _license = 'Apache License 2.0'
def _group = ''
def _url = 'http://support.dell.com'
def _arch = 'x86_64'
def _os = 'LINUX'
def _release = 1
def _sourcePaths=[]
def apiVersion = ''

def getCurrentTimestamp(){
  new Date().format("MM-dd-yyyy_hh-mm")
}

def updateVersionProperties() {
    def buildInfoFile = file('src/main/resources/buildInfo.properties')
    String buildInfoProp = buildInfoFile.getText('UTF-8')
    println "updating version to '${version}' in ${buildInfoFile}"
    buildInfoProp = buildInfoProp.replaceAll(/buildInfo\.version=.*/, "buildInfo.version=${version}")
    buildInfoFile.write(buildInfoProp, 'UTF-8')
    println "updating docker tag to '${dockerTag}' in ${buildInfoFile}"
    buildInfoProp = buildInfoProp.replaceAll(/buildInfo\.tag=.*/, "buildInfo.tag=${dockerTag}")
    buildInfoFile.write(buildInfoProp, 'UTF-8')
    println "updating build date to '${getCurrentTimestamp()}' in ${buildInfoFile}"
    buildInfoProp = buildInfoProp.replaceAll(/buildInfo\.date=.*/, "buildInfo.date=${getCurrentTimestamp()}")
    buildInfoFile.write(buildInfoProp, 'UTF-8')
}

sourceCompatibility = 1.8
version = "${version}"
dockerTag = "${dockerTag}"
group = 'com.dell.isg.smi'
apiVersion = 'api-'+"${version}"

buildscript {
	ext {
		springVersion = '4.3.6.RELEASE'
    	springBootVersion = '1.5.1.RELEASE'
    	springCloudVersion = 'Camden.SR5'
    	generatedAsciidoc = file("${buildDir}/docs/apidocs/asciidoc/generated")
	}
   repositories {
        mavenLocal()
        mavenCentral()
        maven {url "https://plugins.gradle.org/m2/"} 
  }
  dependencies {
  	    classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.15"
        classpath(group: 'com.netflix.nebula', name: 'gradle-ospackage-plugin', version: '4.4.0' )
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
        //classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
  }
}

//gradleLint {
//  rules  = ['dependency-parentheses','overridden-dependency-version','duplicate-dependency-class', 'all-dependency','unused-dependency']
//}

sonarqube {
     properties {
       property "sonar.projectName", "rackhd :: smi-service-dell-server-inventory"
       property "sonar.projectKey", "${group}::smi-service-dell-server-inventory"
     }
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

springBoot {
    executable = true
}

allprojects {
    updateVersionProperties()
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Dell server inventory jar',
                   'Implementation-Version': version
    }
	baseName = 'service-server-inventory'
}

repositories {
	mavenLocal()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	maven { url "https://oss.sonatype.org/content/repositories/releases" }
	maven { url "https://repo.maven.apache.org/maven2" }
}

dependencies {
    compile 'com.dell.isg.smi:adapter-server:1.0.77'
    compile 'com.dell.isg.smi:commons-elm:1.0.82'
    compile 'com.dell.isg.smi:commons-utilities:1.0.32'
    compile 'com.dell.isg.smi:commons-model:1.0.97'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.cloud:spring-cloud-starter-consul-all'
    compile 'org.springframework:spring-web'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'
    testCompile group: 'io.springfox', name:'springfox-staticdocs', version: '2.5.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    compile group: 'org.json', name: 'json', version: '20170516'
}

test {
    systemProperties 'property': 'value'
    systemProperty 'staticdocs.outputDir', generatedAsciidoc
}

license {
        header rootProject.file('license-template')
        includes(["**/*.java", "**/*.properties"])
        strictCheck true
        ignoreFailures true
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    	ext.name = 'DELL Inc.'
}

task generateRpm(type: Rpm){
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()

	vendor = _vendor
	license = _license
	group = _group
	summary = 'Dell server-inventory service'
	description = 'Installs and runs the server-inventory microservice as a linux service'
	url = _url

	packageName = 'dell-smi-service-server-inventory'
	release = _release
	arch = _arch
	os = _os

	from fileTree( "build/libs" ), {
        include "*.jar"
        fileMode = 0755
		user = "root"
		addParentDirs = false
	    into  '/opt/dell/smi/service-server-inventory'
    }

	from fileTree("./"), {
        include "application.yml"
        fileMode = 0755
		//user = "root"
		//addParentDirs = true
	    into  '/opt/dell/smi/service-server-inventory'
    }


	from fileTree( "pkg" ), {
        include "dell-server-inventory.service"
		fileMode = 0777
	    into  '/etc/systemd/system'
    }
	link('/etc/systemd/system/multi-user.target.wants/dell-server-inventory.service', '/etc/systemd/system/dell-server-inventory.service')
}

task generateDeb(type: Deb){
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()

	vendor = _vendor
	license = _license
	group = _group
	summary = 'Dell server-inventory service'
	description = 'Installs and runs the server-inventory microservice as a linux service'
	url = _url

	requires( 'postgresql', '9.4', GREATER | EQUAL)

	packageName = 'dell-smi-service-server-inventory'
	release = _release
	arch = 'all'
	os = _os

	from fileTree( "build/libs" ), {
        include "*.jar"
        fileMode = 0755
		user = "root"
		addParentDirs = true
	    into  '/opt/dell/smi/service-server-inventory'
    }

	from fileTree("./"), {
        include "application.yml"
        fileMode = 0755
		//user = "root"
		//addParentDirs = true
	    into  '/opt/dell/smi/service-server-inventory'
    }

	from fileTree( "pkg" ), {
        include "dell-server-inventory.service"
		fileMode = 0777
	    into  '/etc/systemd/system'
    }
	link('/etc/systemd/system/multi-user.target.wants/dell-server-inventory.service', '/etc/systemd/system/dell-server-inventory.service')
}


task buildSourcePathsArray(dependsOn: 'eclipseClasspath' ){
	doLast{
		def classpathFile = file('.classpath')
		if( classpathFile.exists() ) {
			def cpXml = new XmlParser().parse(classpathFile)
			cpXml.classpathentry.each {
				if('lib' == it.@kind ) {
					if( it.@sourcepath == null ){
						println 'missing source jar for:' + it.@path
					}
					else{
					 	_sourcePaths.add(it.@sourcepath)
					}
				}
			}
		}
		 
		def arrayLength = _sourcePaths.size()
		println 'sourcePaths length is:' + arrayLength
	}
}


task dependencySourcesZip(type: Zip, dependsOn: 'buildSourcePathsArray' ) {
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()
	baseName = "smi-service-dell-server-inventory-dependency-sources"
	version = "${dockerTag}"
	outputs.upToDateWhen { false }
 
    from _sourcePaths
}

asciidoctor {
    dependsOn test
    sources {
        include 'api-*.adoc'
    }
    backends = ['pdf']
    attributes = [
        doctype: 'book',
        toc: 'left',
        toclevels: '2',
        numbered: '',
        sectlinks: '',
        sectanchors: '',
        hardbreaks: '',
        generated: generatedAsciidoc
    ]
}

bintrayUpload.dependsOn asciidoctor

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    filesSpec {
       from file(asciidoctor.outputDir.path + '/pdf')
       into '.'
    }
    dryRun = false
    publish = true
    override = false
    pkg {
		repo = "${bintrayRepo}"
		name = apiVersion
		userOrg = "${bintrayUserOrg}"
		desc = 'Swagger API for Server Inventory Service.'
		licenses = ['Apache-2.0']
		vcsUrl = "${bintrayVcsUrl}"
		publicDownloadNumbers = true
		version {
			name = apiVersion
			desc = 'apidoc'
			vcsTag = 'master'
		}
	}
}
